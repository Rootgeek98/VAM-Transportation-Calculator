/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vamcalculator;

import java.util.List;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.util.Arrays;
import static java.util.Arrays.stream;
import java.util.concurrent.Future;

/**
 *
 * @author alisafaya
 */
public class MainForm extends javax.swing.JFrame {

    //Degerler sadece ilk defa dogru hesaplaniyor, Kontrol et
    //Sonuclari goster
    static String[] kaynakListesi;
    static String[] hedefListesi;
    static int[][] costs;
    static int[] supply;
    static int[] demand;
    static int nRows;
    static int nCols;

    int[] _supply;
    int[] _demand;
    int _nRows;
    int _nCols;

    static boolean[] rowDone;
    static boolean[] colDone;
    static int[][] result;

    static ExecutorService es;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        InputTab1 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        destinationPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        hedefTable = new javax.swing.JTable();
        hedefEkleButton = new javax.swing.JButton();
        hedefSilButton = new javax.swing.JButton();
        sourcePanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        kaynakTable = new javax.swing.JTable();
        kaynakEkleButton = new javax.swing.JButton();
        kaynakSilButton = new javax.swing.JButton();
        ileriButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        maliyetlerTable = new javax.swing.JTable();
        hesaplaButton = new javax.swing.JButton();
        geriButton = new javax.swing.JButton();
        exitButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sonucTable = new javax.swing.JTable();
        SonucLabel = new javax.swing.JLabel();
        exittButton = new javax.swing.JButton();
        GeriMaliyetButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 600));

        jTabbedPane1.setEnabled(false);

        jSplitPane1.setDividerLocation(373);

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel3.setText("Hedef listesi");

        jLabel4.setText("hedef sayısı (2-100):");

        hedefTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"hedef1",  new Long(1)},
                {"hedef2",  new Long(2)}
            },
            new String [] {
                "Hedef", "Miktar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        hedefTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(hedefTable);
        if (hedefTable.getColumnModel().getColumnCount() > 0) {
            hedefTable.getColumnModel().getColumn(0).setResizable(false);
            hedefTable.getColumnModel().getColumn(1).setResizable(false);
        }

        hedefEkleButton.setText("ekle");
        hedefEkleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hedefEkleButtonActionPerformed(evt);
            }
        });

        hedefSilButton.setText("sil");
        hedefSilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hedefSilButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout destinationPanelLayout = new javax.swing.GroupLayout(destinationPanel);
        destinationPanel.setLayout(destinationPanelLayout);
        destinationPanelLayout.setHorizontalGroup(
            destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destinationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(destinationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addComponent(hedefSilButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hedefEkleButton))
                    .addGroup(destinationPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        destinationPanelLayout.setVerticalGroup(
            destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(destinationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(destinationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(hedefEkleButton)
                    .addComponent(hedefSilButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(destinationPanel);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Kaynak listesi");

        jLabel2.setText("kaynak sayısı (2-100):");

        kaynakTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"kaynak1",  new Long(1)},
                {"kaynak2",  new Long(2)}
            },
            new String [] {
                "Kaynak", "Miktar"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        kaynakTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(kaynakTable);
        if (kaynakTable.getColumnModel().getColumnCount() > 0) {
            kaynakTable.getColumnModel().getColumn(0).setResizable(false);
            kaynakTable.getColumnModel().getColumn(1).setResizable(false);
        }

        kaynakEkleButton.setText("ekle");
        kaynakEkleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaynakEkleButtonActionPerformed(evt);
            }
        });

        kaynakSilButton.setText("sil");
        kaynakSilButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaynakSilButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout sourcePanelLayout = new javax.swing.GroupLayout(sourcePanel);
        sourcePanel.setLayout(sourcePanelLayout);
        sourcePanelLayout.setHorizontalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sourcePanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(sourcePanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(kaynakSilButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(kaynakEkleButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );
        sourcePanelLayout.setVerticalGroup(
            sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sourcePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(sourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(kaynakEkleButton)
                    .addComponent(kaynakSilButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(sourcePanel);

        ileriButton.setText("ileri");
        ileriButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ileriButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Çıkış");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout InputTab1Layout = new javax.swing.GroupLayout(InputTab1);
        InputTab1.setLayout(InputTab1Layout);
        InputTab1Layout.setHorizontalGroup(
            InputTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputTab1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InputTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSplitPane1)
                    .addGroup(InputTab1Layout.createSequentialGroup()
                        .addGap(223, 223, 223)
                        .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ileriButton, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        InputTab1Layout.setVerticalGroup(
            InputTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InputTab1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InputTab1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ileriButton)
                    .addComponent(exitButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Kaynak ve hedef girişi", InputTab1);

        maliyetlerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(maliyetlerTable);

        hesaplaButton.setText("Hesapla");
        hesaplaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hesaplaButtonActionPerformed(evt);
            }
        });

        geriButton.setText("Geri");
        geriButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                geriButtonActionPerformed(evt);
            }
        });

        exitButton2.setText("Çıkış");
        exitButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(223, 223, 223)
                .addComponent(exitButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(geriButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hesaplaButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hesaplaButton)
                    .addComponent(geriButton)
                    .addComponent(exitButton2)))
        );

        jTabbedPane1.addTab("Maliyet girişi", jPanel1);

        jScrollPane4.setEnabled(false);

        sonucTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(sonucTable);

        SonucLabel.setText("Toplam maliyet:");

        exittButton.setText("Çıkış");
        exittButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exittButtonActionPerformed(evt);
            }
        });

        GeriMaliyetButton.setText("Geri");
        GeriMaliyetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeriMaliyetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(SonucLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(GeriMaliyetButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exittButton)
                .addGap(301, 301, 301))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SonucLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 476, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exittButton)
                    .addComponent(GeriMaliyetButton))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Sonuçlar", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void kaynakEkleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaynakEkleButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) kaynakTable.getModel();
        tableModel.addRow(new Object[]{"kaynak", "1"});
    }//GEN-LAST:event_kaynakEkleButtonActionPerformed

    private void kaynakSilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaynakSilButtonActionPerformed
        if (kaynakTable.getSelectedRow() != -1) {
            DefaultTableModel tableModel = (DefaultTableModel) kaynakTable.getModel();
            tableModel.removeRow(kaynakTable.getSelectedRow());
        }
    }//GEN-LAST:event_kaynakSilButtonActionPerformed

    private void hedefSilButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hedefSilButtonActionPerformed
        if (hedefTable.getSelectedRow() != -1) {
            DefaultTableModel tableModel = (DefaultTableModel) hedefTable.getModel();
            tableModel.removeRow(hedefTable.getSelectedRow());
        }
    }//GEN-LAST:event_hedefSilButtonActionPerformed

    private void hedefEkleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hedefEkleButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) hedefTable.getModel();
        tableModel.addRow(new Object[]{"hedef", "1"});
    }//GEN-LAST:event_hedefEkleButtonActionPerformed

    private void ileriButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ileriButtonActionPerformed
        DefaultTableModel tableModel = (DefaultTableModel) kaynakTable.getModel();
        _nRows = tableModel.getRowCount();
        kaynakListesi = new String[_nRows];
        _supply = new int[_nRows];
        for (int i = 0; i < _nRows; i++) {
            if (Long.parseLong(tableModel.getValueAt(i, 1).toString()) < 1) {
                infoBox("Miktar değerleri pozitif olmalı.", "Hata !");
                return;
            }
            kaynakListesi[i] = tableModel.getValueAt(i, 0).toString();
            _supply[i] = Integer.parseInt(tableModel.getValueAt(i, 1).toString());
        }
        tableModel = (DefaultTableModel) hedefTable.getModel();
        _nCols = tableModel.getRowCount();
        hedefListesi = new String[_nCols];
        _demand = new int[_nCols];
        for (int i = 0; i < _nCols; i++) {
            if (Long.parseLong(tableModel.getValueAt(i, 1).toString()) < 1) {
                infoBox("Miktar değerleri pozitif olmalı.", "Hata !");
                return;
            }
            hedefListesi[i] = tableModel.getValueAt(i, 0).toString();
            _demand[i] = Integer.parseInt(tableModel.getValueAt(i, 1).toString());
        }

        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int col) {
                return col != 0;
            }
        };

        tableModel.setColumnCount(0);
        tableModel.setRowCount(0);
        tableModel.addColumn("kaynak\\hedef");

        for (String key : hedefListesi) {
            tableModel.addColumn(key);
        }

        for (String key : kaynakListesi) {
            List<Object> rowData = new LinkedList<>();
            rowData.add(key);
            for (int j = 0; j < hedefListesi.length; j++) {
                rowData.add("1");
            }
            tableModel.addRow(rowData.toArray());
        }

        maliyetlerTable.setModel(tableModel);
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_ileriButtonActionPerformed

    private void geriButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_geriButtonActionPerformed
        jTabbedPane1.setSelectedIndex(0);
    }//GEN-LAST:event_geriButtonActionPerformed

    private void exitButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButton2ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButton2ActionPerformed

    private void hesaplaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hesaplaButtonActionPerformed
        nRows = _nRows;
        nCols = _nCols;
        demand = new int[nCols];
        supply = new int[nRows];

        for (int i = 0; i < nCols; i++) {
            demand[i] = _demand[i];
        }
        for (int i = 0; i < nRows; i++) {
            supply[i] = _supply[i];
        }

        DefaultTableModel tableModel = (DefaultTableModel) maliyetlerTable.getModel();
        es = Executors.newFixedThreadPool(2);
        costs = new int[nRows][nCols];

        for (int i = 0; i < nRows; i++) {
            for (int j = 0; j < nCols; j++) {
                try {
                    int val = Integer.parseInt(tableModel.getValueAt(i, j + 1).toString());
                    if (val < 0) {
                        throw new NumberFormatException();
                    }
                    costs[i][j] = val;
                } catch (NumberFormatException e) {
                    infoBox("Lütfen girdiğiniz değerleri kontrol ediniz.", "Hata!");
                    return;
                }
            }
        }

        rowDone = new boolean[nRows];
        colDone = new boolean[nCols];
        result = new int[nRows][nCols];

        int supplyLeft = stream(supply).sum();
        int totalCost = 0;

        try {
            while (supplyLeft > 0) {
                int[] cell = nextCell();
                int r = cell[0];
                int c = cell[1];

                int quantity = Math.min(demand[c], supply[r]);
                demand[c] -= quantity;
                if (demand[c] == 0) {
                    colDone[c] = true;
                }

                supply[r] -= quantity;
                if (supply[r] == 0) {
                    rowDone[r] = true;
                }

                result[r][c] = quantity;
                supplyLeft -= quantity;

                totalCost += quantity * costs[r][c];
            }
        } catch (Exception e) {
            infoBox("Lütfen girdiğiniz değerleri kontrol ediniz.", "Hata!");
            return;
        }

//        stream(result).forEach(a -> System.out.println(Arrays.toString(a)));
//        System.out.println("Total cost: " + totalCost);
        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        tableModel.setColumnCount(0);
        tableModel.setRowCount(0);
        tableModel.addColumn("kaynak\\hedef");

        for (int i = 0; i < nCols; i++) {
            tableModel.addColumn(hedefListesi[i]);
        }

        tableModel.addColumn("Arz miktarları");

        for (int i = 0; i < nRows; i++) {
            List<Object> rowData = new LinkedList<>();
            rowData.add(kaynakListesi[i]);
            for (int j = 0; j < nCols; j++) {
                rowData.add(String.valueOf(result[i][j]));
            }
            rowData.add(String.valueOf(_supply[i]));
            tableModel.addRow(rowData.toArray());
        }

        List<Object> rowData = new LinkedList<>();
        rowData.add("Talep miktarları");
        for (int j = 0; j < nCols; j++) {
            rowData.add(String.valueOf(_demand[j]));
        }
        tableModel.addRow(rowData.toArray());

        sonucTable.setModel(tableModel);
        SonucLabel.setText("Toplam maliyet:" + totalCost);
        es.shutdown();
        jTabbedPane1.setSelectedIndex(2);
    }//GEN-LAST:event_hesaplaButtonActionPerformed

    private void exittButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exittButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exittButtonActionPerformed

    private void GeriMaliyetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GeriMaliyetButtonActionPerformed
        jTabbedPane1.setSelectedIndex(1);
    }//GEN-LAST:event_GeriMaliyetButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    static int[] nextCell() throws Exception {
        Future<int[]> f1 = es.submit(() -> maxPenalty(nRows, nCols, true));
        Future<int[]> f2 = es.submit(() -> maxPenalty(nCols, nRows, false));

        int[] res1 = f1.get();
        int[] res2 = f2.get();

        if (res1[3] == res2[3]) {
            return res1[2] < res2[2] ? res1 : res2;
        }

        return (res1[3] > res2[3]) ? res2 : res1;
    }

    static int[] diff(int j, int len, boolean isRow) {
        int min1 = Integer.MAX_VALUE, min2 = Integer.MAX_VALUE;
        int minP = -1;
        for (int i = 0; i < len; i++) {
            if (isRow ? colDone[i] : rowDone[i]) {
                continue;
            }
            int c = isRow ? costs[j][i] : costs[i][j];
            if (c < min1) {
                min2 = min1;
                min1 = c;
                minP = i;
            } else if (c < min2) {
                min2 = c;
            }
        }
        return new int[]{min2 - min1, min1, minP};
    }

    static int[] maxPenalty(int len1, int len2, boolean isRow) {
        int md = Integer.MIN_VALUE;
        int pc = -1, pm = -1, mc = -1;
        for (int i = 0; i < len1; i++) {
            if (isRow ? rowDone[i] : colDone[i]) {
                continue;
            }
            int[] res = diff(i, len2, isRow);
            if (res[0] > md) {
                md = res[0];  // max diff
                pm = i;       // pos of max diff
                mc = res[1];  // min cost
                pc = res[2];  // pos of min cost
            }
        }
        return isRow ? new int[]{pm, pc, mc, md} : new int[]{pc, pm, mc, md};
    }

    private static void infoBox(String infoMessage, String titleBar) {
        JOptionPane.showMessageDialog(null, infoMessage, titleBar, JOptionPane.INFORMATION_MESSAGE);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton GeriMaliyetButton;
    private javax.swing.JPanel InputTab1;
    private javax.swing.JLabel SonucLabel;
    private javax.swing.JPanel destinationPanel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton exitButton2;
    private javax.swing.JButton exittButton;
    private javax.swing.JButton geriButton;
    private javax.swing.JButton hedefEkleButton;
    private javax.swing.JButton hedefSilButton;
    private javax.swing.JTable hedefTable;
    private javax.swing.JButton hesaplaButton;
    private javax.swing.JButton ileriButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton kaynakEkleButton;
    private javax.swing.JButton kaynakSilButton;
    private javax.swing.JTable kaynakTable;
    private javax.swing.JTable maliyetlerTable;
    private javax.swing.JTable sonucTable;
    private javax.swing.JPanel sourcePanel;
    // End of variables declaration//GEN-END:variables
}
